{"version":3,"sources":["components/Jumbotron.js","utils/API.js","components/Container.js","components/Row.js","components/Col.js","components/SearchForm.js","components/StaffTable.js","components/StaffContainer.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","className","axios","get","Container","props","fluid","children","Row","Col","size","split","map","join","SearchForm","onChange","handleInputChange","value","name","type","placeholder","id","onClick","handleFormSubmit","StaffTable","scope","sortByLastName","sortByFirstName","results","result","key","login","uuid","src","picture","medium","alt","last","first","cell","href","email","format","dob","date","location","street","number","city","state","postcode","StaffContainer","staff","searchedStaff","sortOrder","search","staffSearch","API","then","response","setState","data","console","log","catch","error","staffToSort","order","sortedOrder","sort","a","b","event","target","preventDefault","alert","filter","employee","toLowerCase","includes","this","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f7550241.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Jumbotron() {\n  return (\n    <div className=\"jumbotron jumbotron-fluid\">\n      <div className=\"container\">\n         <h1 className=\"display-3\">Welcome to the Staff Catalogue</h1>\n        <p className=\"lead\">The table below shows you the Company's current list of staff members.</p>\n         <hr className=\"my-4\"></hr>\n        <p>Use the search field below to look for a specific staff member/s.</p>\n        <p>Click on the \"LAST NAME\" or the \"FIRST NAME\" table header to sort names in ascending or descending order.</p>\n      </div> \n    </div>\n  );\n}\n\nexport default Jumbotron;","import axios from \"axios\";\n\n// generating random users from Random User Generator API (randomuser.me)\nexport default {\n  getStaff: function() {\n    return axios.get(\"https://cors-anywhere.herokuapp.com/https://randomuser.me/api/?results=50&nat=au&seed=result1\");\n  }\n};\n","import React from \"react\";\n\nfunction Container(props) {\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`}>{props.children}</div>;\n}\n\nexport default Container;\n","import React from \"react\";\n\nfunction Row(props) {\n  return <div className={`row${props.fluid ? \"-fluid\" : \"\"}`}>{props.children}</div>;\n}\n\nexport default Row;\n","import React from \"react\";\n\n// This Col component offers us the convenience of being able to set a column's \"size\" prop instead of its className\n// We can also omit the col- at the start of each Bootstrap column class, e.g. size=\"md-12\" instead of className=\"col-md-12\"\n\nfunction Col(props) {\n  const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\n\n  return (\n    <div className={size}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Col;\n","import React from \"react\";\nimport Col from \"./Col\"\nimport Row from \"./Row\"\n\nfunction SearchForm(props) {\n  return (\n    <form>\n      <Row>\n        <Col size=\"md-6\">\n          <div className=\"form-group box\">\n            <input\n                onChange={props.handleInputChange}\n                value={props.value}\n                name=\"search\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Search Staff by Last Name\"\n                id=\"search\"\n            />\n          </div>\n        </Col>\n      \n        <Col size=\"md-4\">\n          <button onClick={props.handleFormSubmit} className=\"btn btn-primary\">Search</button>\n        </Col>\n      </Row>\n    </form>\n  );\n}\n\nexport default SearchForm;\n","import React from \"react\";\n// import react-moment to format dates\nimport Moment from 'react-moment';\n\nfunction StaffTable(props) {\n  return (\n    <table className=\"table table-hover\">\n      <thead>\n        <tr>\n          <th scope=\"col\"></th>\n          <th scope=\"col\" className=\"sort-table\" onClick={props.sortByLastName}>Last Name</th>\n          <th scope=\"col\" className=\"sort-table\" onClick={props.sortByFirstName}>First Name</th>\n          <th scope=\"col\">Mobile No.</th>\n          <th scope=\"col\">E-mail</th>\n          <th scope=\"col\">Birthdate</th>\n          <th scope=\"col\">Address</th>\n        </tr>\n      </thead>\n      <tbody>\n        {/* Create a table row fow each employe from random user generator result  */}\n        {props.results.map(result => (\n          <tr key={result.login.uuid}>\n            <th scope=\"row\"> <img src={result.picture.medium} alt={`${result.name.last}, ${result.name.last}`}/> </th>\n            <td>{result.name.last}</td>\n            <td>{result.name.first}</td>\n            <td>{result.cell}</td>\n            <td className=\"email\"><a href={\"mailto:\" + result.email}>{result.email}</a></td>\n            <td><Moment format=\"DD/MM/YYYY\">{result.dob.date}</Moment></td>\n            <td>{`${result.location.street.number} ${result.location.street.name} ${result.location.city} ${result.location.state} ${result.location.postcode}`}</td>\n          </tr>\n        ))}\n         \n      </tbody>\n    </table> \n  );\n}\n\nexport default StaffTable;\n","import React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport Container from \"./Container\";\nimport Row from \"./Row\";\nimport Col from \"./Col\";\nimport SearchForm from \"./SearchForm\";\nimport StaffTable from \"./StaffTable\";\n\nclass StaffContainer extends Component {\n  // initial states: empty strings for \"search\" & \"sortOrder\" & empty arrays for \"staff\" & \"searchedStaff\"\n  state = {\n    staff: [],\n    searchedStaff: [],\n    // initial state which will order the staff catalogue by name in ascending or descending order\n    sortOrder: \"\",\n    search: \"\"\n  };\n\n  // API GET request to get random users upon component mount\n  componentDidMount() {\n    this.staffSearch();\n  };\n  \n  staffSearch = () => {\n    API.getStaff()\n      .then(response => {\n        this.setState({ \n        staff: response.data.results,\n        searchedStaff: response.data.results\n        });\n        console.log(response.data);\n      }).catch(error => console.log(error)); \n  };\n\n  // click \"LAST NAME\" to sort staff in ascending or descending order by last name\n\n  sortByLastName = () => {\n    const staffToSort = this.state.staff;\n    if (this.state.order === \"ascending\") {\n      const sortedOrder = staffToSort.sort((a, b) => (a.name.last > b.name.last) ? 1 : -1)\n        console.log(sortedOrder)\n\n        this.setState({\n          staff: sortedOrder,\n          order: \"descending\"\n        })\n    } else {\n       const sortedOrder = staffToSort.sort((a, b) => (a.name.last > b.name.last) ? -1 : 1)\n          console.log(sortedOrder)\n\n          this.setState({\n            staff: sortedOrder,\n            order: \"ascending\"\n          })\n      }\n  };\n\n  // click \"FIRST NAME\" to sort staff in ascending or descending order by first name\n\n  sortByFirstName = () => {\n    const staffToSort = this.state.staff;\n    if (this.state.order === \"ascending\") {\n      const sortedOrder = staffToSort.sort((a, b) => (a.name.first > b.name.first) ? 1 : -1)\n        console.log(sortedOrder)\n\n        this.setState({\n          staff: sortedOrder,\n          order: \"descending\"\n        })\n    } else {\n       const sortedOrder = staffToSort.sort((a, b) => (a.name.first > b.name.first) ? -1 : 1)\n          console.log(sortedOrder)\n\n          this.setState({\n            staff: sortedOrder,\n            order: \"ascending\"\n          })\n      }\n  };\n\n  handleInputChange = event => {\n    const value = event.target.value;\n    const name = event.target.name;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  handleFormSubmit = event => {\n     event.preventDefault();\n        if (!this.state.search) {\n            alert(\"Enter the employee's last name...\")\n        }\n        const { staff, search } = this.state;\n\n        //filters the object looking for the value that matches the value entered in the input box by the user  (search.this.state)\n        const searchedStaff = staff.filter(employee => employee.name.last.toLowerCase().includes(search.toLowerCase()));\n\n        this.setState({\n            searchedStaff\n        });\n  };\n\n  render() {\n    return (\n      <Container>\n        <SearchForm \n          staff={this.state.staff}\n          handleFormSubmit={this.handleFormSubmit}\n          handleInputChange={this.handleInputChange}/>\n        <Row>\n          <Col size=\"md-12\">\n            <StaffTable \n              results={this.state.searchedStaff}\n              sortByLastName={this.sortByLastName}\n              sortByFirstName={this.sortByFirstName} />\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default StaffContainer;\n","import React from 'react';\nimport Jumbotron from './components/Jumbotron';\nimport StaffContainer from './components/StaffContainer'\n\nfunction App() {\n  return (\n    <div>\n      <Jumbotron />\n      <StaffContainer />\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootswatch/dist/lux/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}